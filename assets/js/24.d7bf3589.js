(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{607:function(t,a,e){"use strict";e.r(a);var n=e(2),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"引言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),e("p",[e("strong",[t._v("什么是elasticsearch？")])]),t._v(" "),e("p",[t._v("ElasticSearch是一个分布式，高性能、高可用、可伸缩的搜索和分析系统")]),t._v(" "),e("p",[e("strong",[t._v("什么是Elastic Stack？")])]),t._v(" "),e("p",[t._v("Elastic Stack,前身缩写是ELK，就是ElasticSearch + LogStash + Kibana")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/elasticstack0.jpg",alt:"elasticstack0"}})]),t._v(" "),e("p",[t._v("ES的使用场景:")]),t._v(" "),e("ul",[e("li",[t._v("网上商场,搜索商品.")]),t._v(" "),e("li",[t._v("ES配合logstash,kibana,日志分析.")])]),t._v(" "),e("p",[e("strong",[t._v("为什么要使用elasticsearch？")])]),t._v(" "),e("p",[t._v("假设用数据库做搜索，当用户在搜索框输入“四川火锅”时，数据库通常只能把这四个字去进行全部匹配。可是在文本中，可能会出现“推荐四川好吃的火锅”，这时候就没有结果了。")]),t._v(" "),e("h1",{attrs:{id:"_1-elasticsearch基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-elasticsearch基本概念"}},[t._v("#")]),t._v(" 1.elasticsearch基本概念")]),t._v(" "),e("h4",{attrs:{id:"近实时-nrt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#近实时-nrt"}},[t._v("#")]),t._v(" 近实时（NRT）")]),t._v(" "),e("p",[t._v("ES是一个近实时的搜索引擎（平台），代表着从添加数据到能被搜索到只有很少的延迟。（大约是1s）")]),t._v(" "),e("h4",{attrs:{id:"文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[t._v("#")]),t._v(" 文档")]),t._v(" "),e("p",[t._v("Elasticsearch是面向文档的，文档是所有可搜索数据的最小单元。可以把文档理解为关系型数据库中的一条记录。文档会被序列化成json格式，保存在Elasticsearch中。同样json对象由字段组成，给个字段都有自己的类型（字符串，数值，布尔，二进制，日期范围类型）。当我们创建文档时，如果不指定类型，Elasticsearch会帮我们自动匹配类型。每个文档都一个ID，你可以自己指定，也可以让Elasticsearch自动生成。json格式，支持数组/嵌套,在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。")]),t._v(" "),e("h4",{attrs:{id:"索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),e("p",[t._v("索引是具有某种相似特性的文档集合。例如，您可以拥有客户数据的索引、产品目录的另一个索引以及订单数据的另一个索引。索引由一个名称（必须全部是小写）标识。在单个集群中，您可以定义任意多个索引。Index体现了逻辑空间的概念，每个索引都有自己的mapping定义，用于定义包含文档的字段名和字段类型。Index体现了物理空间的概念，索引中的数据分散在shard上。可以将其暂时理解为 MySql中的 database。")]),t._v(" "),e("p",[t._v("索引的mapping和setting")]),t._v(" "),e("ol",[e("li",[t._v("mapping：定义文档字段的类型")]),t._v(" "),e("li",[t._v("setting：定义不同数据的分布")])]),t._v(" "),e("h4",{attrs:{id:"类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),e("p",[t._v("一个索引可以有多个类型。例如一个索引下可以有文章类型，也可以有用户类型，也可以有评论类型。在一个索引中不能再创建多个类型，在以后的版本中将删除类型的整个概念。")]),t._v(" "),e("p",[t._v("从6.0开始，type已经被逐渐废弃。在7.0之前，一个index可以设置多个types。7.0开始一个索引只能创建一个type（_doc）")]),t._v(" "),e("h4",{attrs:{id:"节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点"}},[t._v("#")]),t._v(" 节点")]),t._v(" "),e("p",[t._v("节点是一个Elasticsearch实例，本质上就是一个java进程，节点也有一个名称（默认是随机分配的），当然也可以通过配置文件配置，或者在启动的时候，-E  node.name=node1指定。此名称对于管理目的很重要，因为您希望确定网络中的哪些服务器对应于ElasticSearch集群中的哪些节点。")]),t._v(" "),e("p",[t._v("在Elasticsearch中，节点的类型主要分为如下几种：")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("master eligible节点：")])]),t._v(" "),e("p",[t._v("​ 每个节点启动后，默认就是master eligible节点，可以通过node.master: false  禁止")]),t._v(" "),e("p",[t._v("master eligible可以参加选主流程，成为master节点")]),t._v(" "),e("p",[t._v("当第一个节点启动后，它会将自己选为master节点")]),t._v(" "),e("p",[t._v("每个节点都保存了集群的状态，只有master节点才能修改集群的状态信息")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("data节点")])]),t._v(" "),e("p",[t._v("可以保存数据的节点。负责保存分片数据，在数据扩展上起到了至关重要的作用")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Coordinating 节点")])]),t._v(" "),e("p",[t._v("负责接收客户端请求，将请求发送到合适的节点，最终把结果汇集到一起")]),t._v(" "),e("p",[t._v("每个节点默认都起到了Coordinating node的职责")])])]),t._v(" "),e("p",[t._v("开发环境中一个节点可以承担多个角色，生产环境中，建议设置单一的角色，可以提高性能等")]),t._v(" "),e("h4",{attrs:{id:"分片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分片"}},[t._v("#")]),t._v(" 分片")]),t._v(" "),e("p",[t._v("索引可能存储大量数据，这些数据可能会超出单个节点的硬件限制。例如，占用1TB磁盘空间的10亿个文档的单个索引可能不适合单个节点的磁盘，或者速度太慢，无法单独满足单个节点的搜索请求。")]),t._v(" "),e("p",[t._v("为了解决这个问题，ElasticSearch提供了将索引细分为多个片段（称为碎片）的能力。创建索引时，只需定义所需的碎片数量。每个分片（shard）本身就是一个完全功能性和独立的“索引”，可以托管在集群中的任何节点上。")]),t._v(" "),e("p",[t._v("为什么要分片?")]),t._v(" "),e("ul",[e("li",[t._v("它允许您水平拆分/缩放内容量")]),t._v(" "),e("li",[t._v("它允许您跨碎片（可能在多个节点上）分布和并行操作，从而提高性能/吞吐量")])]),t._v(" "),e("p",[t._v("如何分配分片以及如何将其文档聚合回搜索请求的机制完全由ElasticSearch管理，并且对作为用户的您是透明的。主分片数在索引创建时指定，后续不允许修改，除非Reindex")]),t._v(" "),e("h5",{attrs:{id:"分片副本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分片副本"}},[t._v("#")]),t._v(" 分片副本")]),t._v(" "),e("p",[t._v("在随时可能发生故障的网络/云环境中，非常有用，强烈建议在碎片/节点以某种方式脱机或因任何原因消失时使用故障转移机制。为此，ElasticSearch允许您将索引分片的一个或多个副本复制成所谓的副本分片，简称为副本分片。")]),t._v(" "),e("p",[t._v("为什么要有副本？")]),t._v(" "),e("ul",[e("li",[t._v("当分片/节点发生故障时提供高可用性。因此，需要注意的是，副本分片永远不会分配到复制它的原始/主分片所在的节点上。")]),t._v(" "),e("li",[t._v("允许您扩展搜索量/吞吐量，因为可以在所有副本上并行执行搜索。")])]),t._v(" "),e("p",[t._v("总而言之，每个索引可以分割成多个分片。索引也可以零次（意味着没有副本）或多次复制。复制后，每个索引将具有主分片（从中复制的原始分片）和副本分片（主分片的副本）。")]),t._v(" "),e("p",[t._v("可以在创建索引时为每个索引定义分片和副本的数量。创建索引后，您还可以随时动态更改副本的数量。您可以使用收缩和拆分API更改现有索引的分片数量，建议在创建索引时就考虑好分片和副本的数量。")]),t._v(" "),e("p",[t._v("默认情况下，ElasticSearch中的每个索引都分配一个主分片和一个副本，这意味着如果集群中至少有两个节点，则索引将有一个主分片和另一个副本分片（一个完整副本），每个索引总共有两个分片。")]),t._v(" "),e("h5",{attrs:{id:"倒排索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#倒排索引"}},[t._v("#")]),t._v(" 倒排索引")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/%E5%80%92%E6%8E%921.jpg",alt:"倒排1"}})]),t._v(" "),e("ul",[e("li",[t._v("DocID：出现某单词的文档ID")]),t._v(" "),e("li",[t._v("TF(词频)：单词在该文档中出现的次数")]),t._v(" "),e("li",[t._v("POS：单词在文档中的位置")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/%E5%80%92%E6%8E%92%E4%BA%8C.jpg",alt:"倒排二"}})]),t._v(" "),e("h1",{attrs:{id:"_2-linux-es的安装-elasticsearch-7-3-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux-es的安装-elasticsearch-7-3-2"}},[t._v("#")]),t._v(" 2.linux ES的安装(elasticsearch-7.3.2)")]),t._v(" "),e("p",[t._v("1.下载elasticsearch-7.3.2 tar包  下载地址"),e("a",{attrs:{href:"https://www.elastic.co/cn/downloads/elasticsearch",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.elastic.co/cn/downloads/elasticsearch"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("2.上传到linux，解压  tar -zxvf   elasticsearch-7.3.2-linux-x86_64.tar.gz")]),t._v(" "),e("p",[t._v("3.进入解压后的 elasticsearch-7.3.2文件夹的bin目录下  执行./elasticsearch")]),t._v(" "),e("p",[t._v("执行结果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.jpg",alt:"启动报错"}})]),t._v(" "),e("p",[t._v("这个错误，是因为使用root用户启动elasticsearch，elasticsearch是不允许使用root用户启动的")]),t._v(" "),e("p",[t._v("在6.xx之前，可以通过root用户启动。但是发现黑客可以透过elasticsearch获取root用户密码，所以为了安全性，在6版本之后就不能通过root启动elasticsearch")]),t._v(" "),e("p",[t._v("解决方案如下：")]),t._v(" "),e("p",[t._v("groupadd taibai\nuseradd taibai -g taibai")]),t._v(" "),e("p",[t._v("cd /opt     [elasticsearch-7.3.2所在路径]")]),t._v(" "),e("p",[t._v("chown -R taibai:taibai elasticsearch-7.3.2")]),t._v(" "),e("h5",{attrs:{id:"修改配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改配置"}},[t._v("#")]),t._v(" 修改配置")]),t._v(" "),e("p",[t._v("1、调整jvm内存大小(机器内存够也可不调整)")]),t._v(" "),e("p",[e("strong",[t._v("vim config/jvm.options")])]),t._v(" "),e("p",[t._v("-Xms512m\n-Xmx512m")]),t._v(" "),e("p",[t._v("2、修改network配置，支持通过ip访问")]),t._v(" "),e("p",[e("strong",[t._v("vim config/elasticsearch.yml")])]),t._v(" "),e("p",[t._v("cluster.name=luban")]),t._v(" "),e("p",[t._v("node.name=node-1")]),t._v(" "),e("p",[t._v("network.host: 0.0.0.0")]),t._v(" "),e("p",[t._v("http.port: 9200")]),t._v(" "),e("p",[t._v('cluster.initial_master_nodes: ["node-1"]')]),t._v(" "),e("p",[t._v("max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\nvm最大虚拟内存,max_map_count[65530]太低，至少增加到[262144]")]),t._v(" "),e("p",[e("strong",[t._v("vim /etc/sysctl.conf")])]),t._v(" "),e("p",[t._v("vm.max_map_count=655360")]),t._v(" "),e("p",[t._v("sysctl -p   使配置生效")]),t._v(" "),e("p",[t._v("descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]")]),t._v(" "),e("p",[t._v("最大文件描述符[4096]对于elasticsearch进程可能太低，至少增加到[65536]")]),t._v(" "),e("p",[e("strong",[t._v("vim /etc/security/limits.conf")])]),t._v(" "),e("div",{staticClass:"language-tex extra-class"},[e("pre",{pre:!0,attrs:{class:"language-tex"}},[e("code",[t._v("* soft nofile 65536\n* hard nofile 131072\n* soft nproc 2048\n* hard nproc 4096\n\n* 所有用户\nnofile - 打开文件的最大数目\nnoproc - 进程的最大数目\nsoft 指的是当前系统生效的设置值\nhard 表明系统中所能设定的最大值\n")])])]),e("p",[t._v("max number of threads [2048] for user [tongtech] is too low, increase to at least [4096]")]),t._v(" "),e("p",[t._v("用户的最大线程数[2048]过低，增加到至少[4096]")]),t._v(" "),e("p",[e("strong",[t._v("vim /etc/security/limits.d/90-nproc.conf")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("* soft nproc 4096\n")])])]),e("p",[e("strong",[t._v("启动：")])]),t._v(" "),e("p",[t._v("su taibai")]),t._v(" "),e("p",[t._v("cd /opt/elasticsearch-7.3.2/bin")]),t._v(" "),e("p",[t._v("./elasticsearch 或  ./elasticsearch -d   (以后台方式运行)")]),t._v(" "),e("p",[t._v("注意：注意开放端口或者关闭防火墙（centos7）")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("查询防火墙状态：firewall-cmd --state")])]),t._v(" "),e("li",[e("p",[t._v("关闭防火墙：systemctl stop firewalld.service")])]),t._v(" "),e("li",[e("p",[t._v("开启防火墙： systemctl start firewalld.service")])]),t._v(" "),e("li",[e("p",[t._v("禁止firewall开机启动：systemctl disable firewalld.service")]),t._v(" "),e("p",[t._v("​")])])]),t._v(" "),e("p",[t._v("安装成功：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/es%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png",alt:"es安装成功"}})]),t._v(" "),e("h1",{attrs:{id:"_3-elasticsearch-head-的安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-elasticsearch-head-的安装"}},[t._v("#")]),t._v(" 3.elasticsearch-head 的安装")]),t._v(" "),e("p",[t._v("google应用商店下载插件安装（需翻墙）：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/elasticsearch_head.png",alt:"elasticsearch_head"}})]),t._v(" "),e("h1",{attrs:{id:"_4-kibana的安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-kibana的安装"}},[t._v("#")]),t._v(" 4.kibana的安装")]),t._v(" "),e("p",[t._v("1.下载kibana-7.3.2-linux-x86_64.tar.gz   "),e("a",{attrs:{href:"https://www.elastic.co/cn/downloads/kibana",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.elastic.co/cn/downloads/kibana"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("2.上传至linux系统中并解压     tar -zxvf kibana-7.3.2-linux-x86_64.tar.gz")]),t._v(" "),e("p",[t._v("3.vim  kibana-7.3.2-linux-x86_64/config/kibana.yml")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('server.port: 5601\nserver.host: "0.0.0.0"\ni18n.locale: "zh-CN"\n')])])]),e("p",[t._v("4.cd  kibana-7.3.2-linux-x86_64/bin")]),t._v(" "),e("p",[t._v("5,  ./kibana --allow-root")]),t._v(" "),e("p",[t._v("6.访问kibana")]),t._v(" "),e("h1",{attrs:{id:"写请求原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写请求原理"}},[t._v("#")]),t._v(" 写请求原理")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/%E5%86%99%E6%B5%81%E7%A8%8B.png",alt:"写流程"}})]),t._v(" "),e("p",[t._v("以下是写单个文档所需的步骤：\n(1 ）客户端向 NODE I 发送写请求。")]),t._v(" "),e("p",[t._v("(2)检查Active的Shard数。")]),t._v(" "),e("p",[t._v("(3) NODEI 使用文档 ID 来确定文档属于分片 0，通过集群状态中的内容路由表信息获知分片 0 的主分片位于 NODE3 ，因此请求被转发到 NODE3 上。")]),t._v(" "),e("p",[t._v("( 4 ) NODE3 上的主分片执行写操作 。 如果写入成功，则它将请求并行转发到 NODE I 和\nNODE2 的副分片上，等待返回结果 。当所有的副分片都报告成功， NODE3 将向协调节点报告\n成功，协调节点再向客户端报告成功 。\n在客户端收到成功响应时 ，意味着写操作已经在主分片和所有副分片都执行完成。")]),t._v(" "),e("p",[e("strong",[t._v("1. 为什么要检查Active的Shard数？")])]),t._v(" "),e("p",[t._v("ES中有一个参数，叫做wait"),e("em",[t._v("for")]),t._v("activeshards，这个参数是Index的一个setting，也可以在请求中带上这个参数。这个参数的含义是，在每次写入前，该shard至少具有的active副本数。假设我们有一个Index，其每个Shard有3个Replica，加上Primary则总共有4个副本。如果配置wait"),e("em",[t._v("for")]),t._v("activeshards为3，那么允许最多有一个Replica挂掉，如果有两个Replica挂掉，则Active的副本数不足3，此时不允许写入。")]),t._v(" "),e("p",[t._v("这个参数默认是1，即只要Primary在就可以写入，起不到什么作用。如果配置大于1，可以起到一种保护的作用，保证写入的数据具有更高的可靠性。但是这个参数只在写入前检查，并不保证数据一定在至少这些个副本上写入成功，所以并不是严格保证了最少写入了多少个副本。")]),t._v(" "),e("p",[e("strong",[t._v("在以前的版本中，是写一致性机制，现被替换为wait"),e("em",[t._v("for")]),t._v("activeshards")])]),t._v(" "),e("p",[t._v("one：要求我们这个写操作，只要有一个primary shard是active活跃可用的，就可以执行\nall：要求我们这个写操作，必须所有的primary shard和replica shard都是活跃的，才可以执行这个写操作\nquorum：要求所有的shard中，必须是大部分的shard都是活跃的，可用的，才可以执行这个写操作")]),t._v(" "),e("p",[t._v("写一致性的默认策略是 quorum，即多数的分片（其中分片副本可以是主分片或副分片）在\n写入操作时处于可用状态。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("put /index/type/id?consistency=quorum\nquroum = int( (primary + number_of_replicas) / 2 ) + 1\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("简 介")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("version")]),t._v(" "),e("td",[t._v("设置文档版本号。主要用于实现乐观锁")])]),t._v(" "),e("tr",[e("td",[t._v("version_type")]),t._v(" "),e("td",[t._v("详见版本类型")])]),t._v(" "),e("tr",[e("td",[t._v("op_type")]),t._v(" "),e("td",[t._v("可设置为 create 。 代表仅在文档不存在时才写入 。 如果文档己存在，则写请求将失败")])]),t._v(" "),e("tr",[e("td",[t._v("routing")]),t._v(" "),e("td",[t._v("ES 默认使用文档 ID 进行路由，指定 routing 可使用 routing 值进行路由")])]),t._v(" "),e("tr",[e("td",[t._v("wait_for_active_shards")]),t._v(" "),e("td",[t._v("用于控制写一致性，当指定数量的分片副本可用时才执行写入，否则重试直至超时 。默认为 l ， 主分片可用 即执行写入")])]),t._v(" "),e("tr",[e("td",[t._v("refresh")]),t._v(" "),e("td",[t._v("写入完毕后执行 refresh ，使其对搜索可见")])]),t._v(" "),e("tr",[e("td",[t._v("timeout")]),t._v(" "),e("td",[t._v("请求超时时间 ， 默认为 l 分钟")])]),t._v(" "),e("tr",[e("td",[t._v("pipeline")]),t._v(" "),e("td",[t._v("指定事先创建好的 pipeline 名称")])])])]),t._v(" "),e("p",[e("strong",[t._v("写入Primary完成后，为何要等待所有Replica响应(或连接失败)后返回")])]),t._v(" "),e("p",[t._v("在更早的ES版本，Primary和Replica之间是允许异步复制的，即写入Primary成功即可返回。但是这种模式下，如果Primary挂掉，就有丢数据的风险，而且从Replica读数据也很难保证能读到最新的数据。所以后来ES就取消异步模式了，改成Primary等Replica返回后再返回给客户端。")]),t._v(" "),e("p",[t._v("因为Primary要等所有Replica返回才能返回给客户端，那么延迟就会受到最慢的Replica的影响，这确实是目前ES架构的一个弊端。之前曾误认为这里是等wait"),e("em",[t._v("for")]),t._v("active_shards个副本写入成功即可返回，但是后来读源码发现是等所有Replica返回的。")]),t._v(" "),e("p",[t._v("如果Replica写入失败，ES会执行一些重试逻辑等，但最终并不强求一定要在多少个节点写入成功。在返回的结果中，会包含数据在多少个shard中写入成功了，多少个失败了")]),t._v(" "),e("h1",{attrs:{id:"_5-restful-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-restful-api"}},[t._v("#")]),t._v(" 5.RESTful API")]),t._v(" "),e("h4",{attrs:{id:"_1-创建空索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建空索引"}},[t._v("#")]),t._v(" 1.创建空索引")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT /taibai \n{\n\t"settings": {\n\t\t"number_of_shards": "2",   //分片数\n\t\t"number_of_replicas": "0",  //副本数\n\t\t"write.wait_for_active_shards": 1\n\t}\n}\n\n\n修改副本数\nPUT taibai/_settings\n{\n    "number_of_replicas" : "2"\n}\n')])])]),e("h4",{attrs:{id:"_2-删除索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-删除索引"}},[t._v("#")]),t._v(" 2.删除索引")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("DELETE /taibai\n")])])]),e("h4",{attrs:{id:"_3-插入数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-插入数据"}},[t._v("#")]),t._v(" 3.插入数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//指定id\nPOST /taibai/_doc/1001\n{\n  "id":1001,\n  "name":"张三",\n  "age":20,\n  "sex":"男"\n}\n\n//不指定id  es帮我们自动生成\nPOST /taibai/_doc\n{\n  "id":1002,\n  "name":"三哥",\n  "age":20,\n  "sex":"男"\n}\n')])])]),e("h4",{attrs:{id:"_4-更新数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-更新数据"}},[t._v("#")]),t._v(" 4.更新数据")]),t._v(" "),e("p",[t._v("在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT /taibai/_doc/1001\n{\n  "id":1009,\n  "name":"太白",\n  "age":21,\n  "sex":"哈哈"\n}\n')])])]),e("h4",{attrs:{id:"_4-1局部更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1局部更新"}},[t._v("#")]),t._v(" 4.1局部更新：")]),t._v(" "),e("p",[t._v("其实es内部对partial update的实际执行和传统的全量替换方式是几乎一样的，其步骤如下")]),t._v(" "),e("ol",[e("li",[t._v("内部先获取到对应的document；")]),t._v(" "),e("li",[t._v("将传递过来的field更新到document的json中(这一步实质上也是一样的);")]),t._v(" "),e("li",[t._v("将老的document标记为deleted（到一定时候才会物理删除）;")]),t._v(" "),e("li",[t._v("将修改后的新的document创建出来")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_update/1001\n{\n  "doc":{\n     "age":23\n  }\n}\n')])])]),e("p",[t._v("替换和更新的不同：替换是每次都会去替换，更新是有新的东西就更新，没有新的修改就不更新，更新比替换的性能好")]),t._v(" "),e("h4",{attrs:{id:"_5-删除数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-删除数据"}},[t._v("#")]),t._v(" 5.删除数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("DELETE /taibai/_doc/1001\n")])])]),e("h4",{attrs:{id:"_6-0根据id搜索数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-0根据id搜索数据"}},[t._v("#")]),t._v(" 6.0根据id搜索数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /taibai/_doc/6_h43W0BdTjVHQ-cgnv2\n")])])]),e("h4",{attrs:{id:"_6-1搜索全部数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1搜索全部数据"}},[t._v("#")]),t._v(" 6.1搜索全部数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('GET /taibai/_search    默认最多返回10条数据\n\n\nPOST /bank/_search\n{\n  "query": { "match_all": {} },\n  "sort": [\n    {\n      "属性名": {\n        "order": "asc"\n      }\n    }\n  ]\n}\n\n\n\n\n\ntook      \t Elasticsearch运行查询需要多长时间(以毫秒为单位)\ntimed_out  \t 搜索请求是否超时\n_shards      搜索了多少碎片，并对多少碎片成功、失败或跳过进行了细分。\nmax_score    找到最相关的文档的得分\nhits.total.value  找到了多少匹配的文档\nhits.sort    文档的排序位置(当不根据相关性得分排序时)\nhits._score  文档的相关性评分(在使用match_all时不适用)\n')])])]),e("h4",{attrs:{id:"_6-2关键字搜索数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2关键字搜索数据"}},[t._v("#")]),t._v(" 6.2关键字搜索数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /taibai/_search?q=age:23    查询年龄等于23的\n")])])]),e("h4",{attrs:{id:"_6-3dsl搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3dsl搜索"}},[t._v("#")]),t._v(" 6.3DSL搜索")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n  "query" : {\n    "match" : {       //查询年龄等于23的\n      "age" : 23\n    }\n  }\n}\n\n\n//查询地址等于mill或者lane\nGET /bank/_search\n{\n  "query": { "match": { "address": "mill lane" } }\n}\n\n//查询地址等于（mill lane）的\nGET /bank/_search\n{\n  "query": { "match_phrase": { "address": "mill lane" } }\n}\n\n//注意：match 中如果加空格，那么会被认为两个单词，包含任意一个单词将被查询到\n//match_parase 将忽略空格，将该字符认为一个整体，会在索引中匹配包含这个整体的文档。\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search    //查询年龄大于20  并且性别是男的\n{\n  "query": {\n    "bool": {\n      "filter": {\n        "range": {\n            "age": {\n              "gt": 20\n            }\n          }\n        },\n      "must": {\n        "match": {\n          "sex": "男"\n        }\n      }\n    }\n  }\n}   \n')])])]),e("h4",{attrs:{id:"_6-4高亮显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-4高亮显示"}},[t._v("#")]),t._v(" 6.4高亮显示")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search   \t\t\t//这里会分词搜索\n{\n  "query": {\n    "match": {\n      "name": "张三"\n    }\n  },\n  "highlight": {\n    "fields": {\n      "name": {}\n    }\n  }\n}\n')])])]),e("h4",{attrs:{id:"_6-5聚合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-5聚合"}},[t._v("#")]),t._v(" 6.5聚合")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations.html"),e("OutboundLink")],1)]),t._v(" "),e("h5",{attrs:{id:"avg-平均值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#avg-平均值"}},[t._v("#")]),t._v(" avg ：平均值")]),t._v(" "),e("h5",{attrs:{id:"max-最大值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#max-最大值"}},[t._v("#")]),t._v(" max：最大值")]),t._v(" "),e("h5",{attrs:{id:"min-最小值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#min-最小值"}},[t._v("#")]),t._v(" min：最小值")]),t._v(" "),e("h5",{attrs:{id:"sum-求和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sum-求和"}},[t._v("#")]),t._v(" sum：求和")]),t._v(" "),e("p",[t._v("例如：查询平均年龄 （如果不指定size等于0，则还会返回10条数据）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /bank/_search\n{\n  "aggs": {\n    "taibai": {   //自定义名字\n      "avg": {    //什么类型\n        "field": "age"    //那个字段\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("p",[t._v("使用脚本")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /bank/_search\n{\n  "aggs": {\n    "taibai": {\n      "avg": {\n        "script": {\n          "source": "doc.age.value"\n        }\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("h5",{attrs:{id:"cardinality-去重统计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cardinality-去重统计"}},[t._v("#")]),t._v(" cardinality : 去重统计")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /bank/_search\n{\n  "aggs": {\n    "taibai": {\n      "cardinality": {\n        "field": "age"\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("h5",{attrs:{id:"extended-stats扩展统计聚合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extended-stats扩展统计聚合"}},[t._v("#")]),t._v(" extended_stats扩展统计聚合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /bank/_search\n{\n  "aggs": {\n    "taibai": {\n      "extended_stats": {\n        "field": "age"\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("h5",{attrs:{id:"value-count值计数统计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#value-count值计数统计"}},[t._v("#")]),t._v(" value_count值计数统计")]),t._v(" "),e("p",[t._v("可以理解为统计个数")]),t._v(" "),e("h5",{attrs:{id:"terms词聚合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#terms词聚合"}},[t._v("#")]),t._v(" terms词聚合")]),t._v(" "),e("p",[t._v("基于某个field，该 field 内的每一个【唯一词元】为一个桶，并计算每个桶内文档个数。默认返回顺序是按照文档个数多少排序。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /bank/_search\n{\n  "aggs": {\n    "taibai": {\n      "terms": {\n        "field": "age"\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("h5",{attrs:{id:"top-hits最高匹配权值聚合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#top-hits最高匹配权值聚合"}},[t._v("#")]),t._v(" top_hits最高匹配权值聚合")]),t._v(" "),e("p",[t._v("获取到每组前n条数据，相当于sql 中Top（group by 后取出前n条）。它跟踪聚合中相关性最高的文档")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /bank/_search\n{\n  "aggs": {\n    "taibai": {\n      "terms": {\n        "field": "age"\n      },\n      "aggs": {\n        "count": {\n          "top_hits": {\n            "size": 3\n          }\n        }\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("h5",{attrs:{id:"range范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#range范围"}},[t._v("#")]),t._v(" range范围")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST bank/_search\n{\n  "aggs": {\n    "group_by_age": {\n      "range": {\n        "field": "age",\n        "ranges": [\n          {\n            "from": 20,\n            "to": 30\n          },\n          {\n            "from": 30,\n            "to": 40\n          },\n          {\n            "from": 40,\n            "to": 50\n          }\n        ]\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),e("h4",{attrs:{id:"_6-6查询响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-6查询响应"}},[t._v("#")]),t._v(" 6.6查询响应")]),t._v(" "),e("p",[t._v("如果使用浏览器工具去查询，返回的json没有格式化，可在后面加参数pretty，返回格式化后的数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http://192.168.204.209:9200/taibai/_doc/_fiK3W0BdTjVHQ-c0HvY?pretty\n")])])]),e("h4",{attrs:{id:"_6-7指定响应字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-7指定响应字段"}},[t._v("#")]),t._v(" 6.7指定响应字段")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /taibai/_doc/9_iK3W0BdTjVHQ-czHuE?_source=id,name    //只返回id和name字段\n")])])]),e("h4",{attrs:{id:"_6-8去掉元数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-8去掉元数据"}},[t._v("#")]),t._v(" 6.8去掉元数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /taibai/_source/9_iK3W0BdTjVHQ-czHuE\n\n\n\n还可以去掉元数据并且返回指定字段\nGET /taibai/_source/9_iK3W0BdTjVHQ-czHuE?_source=id,name  \n")])])]),e("h4",{attrs:{id:"_6-9判断文档是否存在"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-9判断文档是否存在"}},[t._v("#")]),t._v(" 6.9判断文档是否存在")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("HEAD /taibai/_doc/9_iK3W0BdTjVHQ-czHuE\n")])])]),e("h4",{attrs:{id:"_7-批量操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-批量操作"}},[t._v("#")]),t._v(" 7.批量操作")]),t._v(" "),e("p",[t._v("语法实例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST _bulk\n{ "index" : { "_index" : "test", "_id" : "1" } }\n{ "field1" : "value1" }\n{ "delete" : { "_index" : "test", "_id" : "2" } }\n{ "create" : { "_index" : "test", "_id" : "3" } }\n{ "field1" : "value3" }\n{ "update" : {"_id" : "1", "_index" : "test"} }\n{ "doc" : {"field2" : "value2"} }\n')])])]),e("h4",{attrs:{id:"_7-1批量查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1批量查询"}},[t._v("#")]),t._v(" 7.1批量查询")]),t._v(" "),e("p",[t._v("如果，某一条数据不存在，不影响整体响应，需要通过found的值进行判断是否查询到数据。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_mget\n{\n"ids" : [ "8fiK3W0BdTjVHQ-cxntK", "9fiK3W0BdTjVHQ-cy3sI" ]\n}\n')])])]),e("h4",{attrs:{id:"_7-2批量插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2批量插入"}},[t._v("#")]),t._v(" 7.2批量插入")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST _bulk\n{ "create" : { "_index" : "taibai", "_id" : "3" } }\n{"id":2002,"name":"name1","age": 20,"sex": "男"}\n{ "create" : { "_index" : "taibai", "_id" : "4" } }\n{"id":2003,"name":"name1","age": 20,"sex": "男"}\n')])])]),e("h4",{attrs:{id:"_7-3批量删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3批量删除"}},[t._v("#")]),t._v(" 7.3批量删除")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST _bulk\n{ "delete" : { "_index" : "taibai", "_id" : "8PiK3W0BdTjVHQ-cxHs1" } }\n{ "delete" : { "_index" : "taibai", "_id" : "6vh43W0BdTjVHQ-cHXv8" } }\n')])])]),e("h4",{attrs:{id:"_7-4批量修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-4批量修改"}},[t._v("#")]),t._v(" 7.4批量修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST _bulk\n{ "update" : {"_id" : "4", "_index" : "taibai"} }\n{ "doc" : {"name" : "太白"} }\n{ "update" : {"_id" : "3", "_index" : "taibai"} }\n{ "doc" : {"name" : "太白"} }\n')])])]),e("h4",{attrs:{id:"_8-分页查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-分页查询"}},[t._v("#")]),t._v(" 8.分页查询")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /taibai/_search?size=1&from=2     size: 结果数，默认10      from: 跳过开始的结果数，默认0\n")])])]),e("h4",{attrs:{id:"_9-映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-映射"}},[t._v("#")]),t._v(" 9.映射")]),t._v(" "),e("p",[t._v("前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则，自动判断的类型和实际需求是不相符的。")]),t._v(" "),e("p",[t._v("自动判断的规则如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("JSON type")]),t._v(" "),e("th",[t._v("Field type")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Boolean: true or false")]),t._v(" "),e("td",[t._v('"boolean"')])]),t._v(" "),e("tr",[e("td",[t._v("Whole number: 123")]),t._v(" "),e("td",[t._v('"long"')])]),t._v(" "),e("tr",[e("td",[t._v("Floating point: 123.45")]),t._v(" "),e("td",[t._v('"double"')])]),t._v(" "),e("tr",[e("td",[t._v('String, valid date: "2014-09-15"')]),t._v(" "),e("td",[t._v('"date"')])]),t._v(" "),e("tr",[e("td",[t._v('String: "foo bar"')]),t._v(" "),e("td",[t._v('"string"')])])])]),t._v(" "),e("p",[t._v("创建明确类型的索引：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT /goods\n{\n  "settings": {\n    "number_of_replicas": 0,\n    "number_of_shards": 1\n  },\n  "mappings": {\n    "properties": {\n      "id": {\n        "type": "long"\n      },\n      "sn": {\n        "type": "keyword"\n      },\n      "name": {\n        "type": "text",\n        "analyzer": "ik_max_word"\n      },\n      "price": {\n        "type": "double"\n      },\n      "num": {\n        "type": "integer"\n      },\n      "alert_num": {\n        "type": "integer"\n      },\n      "image": {\n        "type": "keyword"\n      },\n      "images": {\n        "type": "keyword"\n      },\n      "weight": {\n        "type": "double"\n      },\n      "create_time": {\n        "type": "date",\n        "format": "yyyy-MM-dd HH:mm:ss"\n      },\n      "update_time": {\n        "type": "date",\n        "format": "yyyy-MM-dd HH:mm:ss"\n      },\n      "spu_id": {\n        "type": "keyword"\n      },\n      "category_id": {\n        "type": "integer"\n      },\n      "category_name": {\n        "type": "text",\n        "analyzer": "ik_smart"\n      },\n      "brand_name": {\n        "type": "keyword"\n      },\n      "spec": {\n        "type": "text",\n        "analyzer": "ik_max_word"\n      },\n      "sale_num": {\n        "type": "integer"\n      },\n      "comment_num": {\n        "type": "integer"\n      },\n      "status": {\n        "type": "integer"\n      }\n    }\n  }\n}\n')])])]),e("p",[t._v("添加一个字段到现有的映射")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT /luban/_mapping\n{\n  "properties": {\n    "isold": {      //字段名\n      "type": "keyword",  //类型\n      "index": false\n    }\n  }\n}\n')])])]),e("p",[t._v("更新字段的映射")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("除了支持的映射参数外，您不能更改现有字段的映射或字段类型。更改现有字段可能会使已经建立索引的数据无效。\n\n如果您需要更改字段映射，创建具有正确映射一个新的索引和重新索引的数据转换成指数。\n\n重命名字段会使在旧字段名称下已建立索引的数据无效。而是添加一个alias字段以创建备用字段名称。\n")])])]),e("p",[t._v("查看索引的映射")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /luban/_mapping\n")])])]),e("p",[t._v("查看指定字段的映射信息")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("GET /luban/_mapping/field/name\n")])])]),e("h4",{attrs:{id:"_10-结构化查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-结构化查询"}},[t._v("#")]),t._v(" 10.结构化查询")]),t._v(" "),e("h5",{attrs:{id:"_10-1term查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-1term查询"}},[t._v("#")]),t._v(" 10.1term查询")]),t._v(" "),e("p",[t._v("term 主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串(未经分析的文本数据类型)：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n  "query" : {\n    "term" : {\n      "age" : 20\n    }\n  }\n}\n')])])]),e("h5",{attrs:{id:"_10-2terms查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-2terms查询"}},[t._v("#")]),t._v(" 10.2terms查询")]),t._v(" "),e("p",[t._v("terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去\n做匹配：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n  "query" : {\n    "terms" : {\n      "age" : [20,27]\n    }\n  }\n}\n\n')])])]),e("h5",{attrs:{id:"_10-3range查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-3range查询"}},[t._v("#")]),t._v(" 10.3range查询")]),t._v(" "),e("p",[t._v("range 过滤允许我们按照指定范围查找一批数据：")]),t._v(" "),e("p",[t._v("gt :: 大于\ngte :: 大于等于\nlt :: 小于\nlte :: 小于等于")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n  "query": {\n    "range": {\n      "age": {\n        "gte": 20,\n        "lte": 22\n      }\n    }\n  }\n}\n')])])]),e("h5",{attrs:{id:"_10-4exists查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-4exists查询"}},[t._v("#")]),t._v(" 10.4exists查询")]),t._v(" "),e("p",[t._v("exists 查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的 IS_NULL 条件")]),t._v(" "),e("p",[t._v("包含这个字段就返回返回这条数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n  "query": {\n    "exists": {\n      "field": "name"\n    }\n  }\n}\n')])])]),e("h5",{attrs:{id:"_10-5-match查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-match查询"}},[t._v("#")]),t._v(" 10.5 match查询")]),t._v(" "),e("p",[t._v("match 查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。\n如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析 match 一下查询字符；如果用 match 下指定了一个确切值，在遇到数字，日期，布尔值或者 not_analyzed 的字符串时，它将为你搜索你\n给定的值：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n  "query" : {\n    "match" : {     \n      "name" : "三个小矮人"\n    }\n  }\n}\nmatch查询会先对搜索词进行分词,分词完毕后再逐个对分词结果进行匹配，因此相比于term的精确搜索，match是分词匹配搜索\n')])])]),e("h5",{attrs:{id:"_10-6-bool查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-6-bool查询"}},[t._v("#")]),t._v(" 10.6  bool查询")]),t._v(" "),e("p",[t._v("bool 查询可以用来合并多个条件查询结果的布尔逻辑，它包含一下操作符：\nmust :: 多个查询条件的完全匹配,相当于 and 。\nmust_not :: 多个查询条件的相反匹配，相当于 not 。\nshould :: 至少有一个查询条件匹配, 相当于 or 。\n这些参数可以分别继承一个查询条件或者一个查询条件的数组：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n\t"query": {\n\t\t"bool": {\n\t\t\t"must": {\n\t\t\t\t"term": {\n\t\t\t\t\t"sex": "男"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"must_not": {\n\t\t\t\t"term": {\n\t\t\t\t\t"age": "29"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"should": [\n\t\t\t  {\n\t\t\t\t\t"term": {\n\t\t\t\t\t\t"sex": "男"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"term": {\n\t\t\t\t\t\t"id": 1003\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\n')])])]),e("h5",{attrs:{id:"_10-7过滤查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-7过滤查询"}},[t._v("#")]),t._v(" 10.7过滤查询")]),t._v(" "),e("p",[t._v("查询年龄为20岁的用户。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /taibai/_search\n{\n\t"query": {\n\t\t"bool": {\n\t\t\t"filter": {\n\t\t\t\t"term": {\n\t\t\t\t\t"age": 20\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n')])])]),e("h4",{attrs:{id:"批量导入测试数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#批量导入测试数据"}},[t._v("#")]),t._v(" 批量导入测试数据")]),t._v(" "),e("p",[t._v("该数据是使用www.json- "),e("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//generator.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://generator.com/"),e("OutboundLink")],1),t._v("生成的，因此请忽略数据的实际值和语义，因为它们都是随机生成的。您可以从这里下载示例数据集（accounts.json）。将其提取到当前目录，然后按如下方式将其加载到集群中：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('curl -H "Content-Type: application/json" -XPOST "localhost:9200/bank/_bulk?pretty&refresh" --data-binary "@accounts.json"\n')])])]),e("p",[t._v("官方文档练习案例：")]),t._v(" "),e("p",[t._v("1.给指定id加点年龄(age)")]),t._v(" "),e("p",[t._v("2.执行"),e("code",[t._v("match_all")]),t._v("操作，并按帐户余额降序对结果进行排序，并返回前10个")]),t._v(" "),e("p",[t._v("3.如何从搜索中返回两个字段，即帐号和余额")]),t._v(" "),e("p",[t._v("4.返回帐户为20的")]),t._v(" "),e("p",[t._v("5.回地址中包含“mill”的所有帐户")]),t._v(" "),e("p",[t._v("6.返回地址中包含“mill”或“lane”的所有帐户")]),t._v(" "),e("p",[t._v("7.返回地址中包含“mill”和“lane”的所有帐户")]),t._v(" "),e("p",[t._v("8.地址中既不包含“mill”也不包含“lane”的所有帐户")]),t._v(" "),e("p",[t._v("9.返回所有40岁但不居住在ID的人(state不等于ID)的账户")]),t._v(" "),e("p",[t._v("10.使用bool查询返回余额在20000到30000之间的所有帐户，包括余额。换句话说，我们希望找到余额大于或等于20000，小于或等于30000的账户")]),t._v(" "),e("p",[t._v("11.按状态(state)对所有帐户进行分组，然后返回按count降序排列的前10个")]),t._v(" "),e("p",[t._v("12.按状态计算平均帐户余额(同样只针对按count降序排列的前10个状态)")]),t._v(" "),e("p",[t._v("13.基于之前(12)的聚合，我们现在按降序对平均余额排序")]),t._v(" "),e("p",[t._v("14.按照年龄等级(20-29岁，30-39岁，40-49岁)分组，然后按性别分组，最后得到每个年龄等级，每个性别的平均账户余额")]),t._v(" "),e("h1",{attrs:{id:"_6-中文分词"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-中文分词"}},[t._v("#")]),t._v(" 6.中文分词")]),t._v(" "),e("h5",{attrs:{id:"_6-0-analyzer-的组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-0-analyzer-的组成"}},[t._v("#")]),t._v(" 6.0 "),e("strong",[t._v("Analyzer 的组成")])]),t._v(" "),e("ul",[e("li",[t._v("Character Filters (针对原始文本处理，例如，可以使用字符过滤器将印度阿拉伯数字（ ）转换为其等效的阿拉伯语-拉丁语（0123456789）)")]),t._v(" "),e("li",[t._v('Tokenizer（按照规则切分为单词）,将把文本 "Quick brown fox!" 转换成 terms [Quick, brown, fox!],tokenizer 还记录文本单词位置以及偏移量。')]),t._v(" "),e("li",[t._v("Token Filter(将切分的的单词进行加工、小写、刪除 stopwords，增加同义词）")])]),t._v(" "),e("h5",{attrs:{id:"_6-1elasticsearch内置分词器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1elasticsearch内置分词器"}},[t._v("#")]),t._v(" 6.1elasticsearch内置分词器")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("Standard")])]),t._v(" "),e("th",[t._v("默认分词器  按词分类  小写处理")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("Simple")])]),t._v(" "),e("td",[t._v("按照非字母切分，非字母则会被去除  小写处理")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("**Stop **")]),t._v(" "),e("td",[t._v("小写处理  停用词过滤（the，a, is)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("**Whitespace **")]),t._v(" "),e("td",[t._v("按空格切分")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("**Keyword **")]),t._v(" "),e("td",[t._v("不分词，当成一整个 term 输出")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("**Patter **")]),t._v(" "),e("td",[t._v("通过正则表达式进行分词  默认是 \\W+(非字母进行分隔)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("**Language **")]),t._v(" "),e("td",[t._v("提供了 30 多种常见语言的分词器")])])])]),t._v(" "),e("h5",{attrs:{id:"_6-2分词api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2分词api"}},[t._v("#")]),t._v(" "),e("strong",[t._v("6.2分词api")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /_analyze\n{\n  "analyzer":"standard",\n  "text":"tai bai"\n}\n\nPOST /_analyze\n{\n  "analyzer":"standard",\n  "text":"决战到天亮"\n}\n\n')])])]),e("p",[t._v("英文分词  一般以空格分隔，中文分词的难点在于，在汉语中没有明显的词汇分界点，如果分隔不正确就会造成歧义。")]),t._v(" "),e("p",[t._v("常用中文分词器，IK、jieba、THULAC等，推荐使用IK分词器。")]),t._v(" "),e("h5",{attrs:{id:"_6-3ik分词器安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3ik分词器安装"}},[t._v("#")]),t._v(" "),e("strong",[t._v("6.3ik分词器安装")])]),t._v(" "),e("p",[t._v("IK分词器 Elasticsearch插件地址：https://github.com/medcl/elasticsearch-analysis-ik")]),t._v(" "),e("p",[e("strong",[t._v("注意选择对应es的版本")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/ik.png",alt:"ik"}})])]),t._v(" "),e("p",[e("strong",[t._v("1.下载项目  zip包")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/ik2.png",alt:"ik2"}})])]),t._v(" "),e("p",[e("strong",[t._v("2.解压项目")])]),t._v(" "),e("p",[e("strong",[t._v("3.进入项目跟目录 使用maven编译打包此项目")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/ik3.png",alt:"ik3"}})])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mvn clean\nmvn compile\nmvn package\n")])])]),e("p",[e("strong",[t._v("4.执行完上面命令后 在{project_path}/elasticsearch-analysis-ik/target/releases/elasticsearch-analysis-ik-*.zip会有个zip,上传到linux   elasticsearch 插件目录, 如: plugins/ik   注意在plugins下新建ik目录  将zip包上传到ik目录下")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/ik4.jpg",alt:"ik4"}})])]),t._v(" "),e("p",[e("strong",[t._v("5.使用unzip命令解压zip包，没有unzip的  可先下载unzip   命令：yum install -y unzip zip")])]),t._v(" "),e("p",[e("strong",[t._v("6.解压之后删除原来的zip包")])]),t._v(" "),e("p",[e("strong",[t._v("7.检查是否需要修改版本信息")])]),t._v(" "),e("p",[e("strong",[t._v("vim   {path}/plugins/ik/plugin-descriptor.properties")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/6.png",alt:"6"}})])]),t._v(" "),e("p",[e("strong",[t._v("8.重启 ik插件安装完成")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/ik5.jpg",alt:"ik5"}})])]),t._v(" "),e("p",[e("strong",[t._v("9.测试中文分词器效果")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /_analyze\n{\n  "analyzer": "ik_max_word",   或者  //ik_smart\n  "text": "决战到天亮"\n}\n\n')])])]),e("h5",{attrs:{id:"_6-4拼音分词器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-4拼音分词器"}},[t._v("#")]),t._v(" "),e("strong",[t._v("6.4拼音分词器")])]),t._v(" "),e("p",[e("strong",[t._v("1.下载对应版本的zip包"),e("a",{attrs:{href:"https://github.com/medcl/elasticsearch-analysis-pinyin/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/medcl/elasticsearch-analysis-pinyin/releases"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("strong",[t._v("2.可在Windows解压好，在plugins下创建pinyin文件夹")])]),t._v(" "),e("p",[e("strong",[t._v("3.将解压内容放置在pinyin文件夹，重启")])]),t._v(" "),e("h5",{attrs:{id:"_6-5自定义分词器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-5自定义分词器"}},[t._v("#")]),t._v(" 6.5自定义分词器")]),t._v(" "),e("p",[e("strong",[t._v("接受参数")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("tokenizer")]),t._v(" "),e("th",[t._v("一个内置的或定制的tokenizer。(必需)")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("char_filter")])]),t._v(" "),e("td",[e("strong",[t._v("一个可选的内置或自定义字符过滤器数组。")])])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("filter")])]),t._v(" "),e("td",[e("strong",[t._v("一个可选的内置或定制token过滤器数组。")])])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT my_index\n{\n  "settings": {\n    "analysis": {\n      "analyzer": {\n        "my_custom_analyzer": {\n          "type": "custom", \n          "tokenizer": "standard",\n          "char_filter": [\n            "html_strip"     //过滤HTML标签\n          ],\n          "filter": [\n            "lowercase",    //转小写\n            "asciifolding"  //ASCII-折叠令牌过滤器  例如 à to a\n          ]\n        }\n      }\n    }\n  }\n}\n\n\nPOST my_index/_analyze\n{\n  "analyzer": "my_custom_analyzer",\n  "text": "Is this <b>déjà vu</b>?"\n}\n')])])]),e("p",[e("strong",[t._v("创建一个中文+拼音的分词器")]),t._v("（中文分词后拼音分词）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT my_index\n{\n  "settings": {\n    "analysis": {\n      "analyzer": {\n        "ik_pinyin_analyzer": {\n          "type": "custom",\n          "tokenizer": "ik_smart",\n          "filter": [\n            "pinyin_max_word_filter"\n          ]\n        },\n        "ik_pingying_smark": {\n          "type": "custom",\n          "tokenizer": "ik_smart",\n          "filter": [\n            "pinyin_smark_word_filter"\n          ]\n        }\n      },\n      "filter": {\n        "pinyin_max_word_filter": {\n          "type": "pinyin",\n          "keep_full_pinyin": "true",  #分词全拼如雪花 分词xue,hua\n          "keep_separate_first_letter": "true",#分词简写如雪花 分词xh\n          "keep_joined_full_pinyin": true  #分词会quanpin 连接 比如雪花分词 xuehua\n        },\n        "pinyin_smark_word_filter": {\n          "type": "pinyin",\n          "keep_separate_first_letter": "false", #不分词简写如雪花 分词不分词xh\n          "keep_first_letter": "false"     #不分词单个首字母 如雪花 不分词 x,h\n        }\n      }\n    }\n  }\n}\n\n\nPUT /my_index/_mapping\n  {\n  "properties": {\n      "productName": {\n          "type": "text",\n          "analyzer": "ik_pinyin_analyzer",  #做文档所用的分词器\n          "search_analyzer":"ik_pingying_smark"   #搜索使用的分词器\n      }\n  }\n}\n\nPOST /my_index/_doc\n{\n  "productName": "雪花啤酒100L"\n}\n\n\nGET /my_index/_search\n{\n  "query": {\n    "match": {\n      "productName": "雪Hua"\n    }\n  }\n}\n\n')])])]),e("h1",{attrs:{id:"_7-全文搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-全文搜索"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7.全文搜索")])]),t._v(" "),e("h5",{attrs:{id:"_7-1构建数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1构建数据"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7.1构建数据")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PUT /test\n{\n\t"settings": {\n\t\t"index": {\n\t\t\t"number_of_shards": "1",\n\t\t\t"number_of_replicas": "0"\n\t\t}\n\t},\n\t"mappings": {\n\t\t"properties": {\n\t\t\t"age": {\n\t\t\t\t"type": "integer"\n\t\t\t},\n\t\t\t"email": {\n\t\t\t\t"type": "keyword"\n\t\t\t},\n\t\t\t"name": {\n\t\t\t\t"type": "text"\n\t\t\t},\n\t\t\t"hobby": {\n\t\t\t\t"type": "text",\n\t\t\t\t"analyzer": "ik_max_word"\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nPOST _bulk\n{ "create" : { "_index" : "test","_id": "1000"} }\n{"name":"张三","age": 20,"mail": "111@qq.com","hobby":"羽毛球、乒乓球、足球"}\n{ "create" : { "_index" : "test","_id": "1001"} }\n{"name":"李四","age": 21,"mail": "222@qq.com","hobby":"羽毛球、乒乓球、足球、篮球"}\n{ "create" : { "_index" : "test","_id": "1002"} }\n{"name":"王五","age": 22,"mail": "333@qq.com","hobby":"羽毛球、篮球、游泳、听音乐"}\n{ "create" : { "_index" : "test","_id": "1003"} }\n{"name":"赵六","age": 23,"mail": "444@qq.com","hobby":"跑步、游泳、篮球"}\n{ "create" : { "_index" : "test","_id": "1004"} }\n{"name":"孙七","age": 24,"mail": "555@qq.com","hobby":"听音乐、看电影、羽毛球"}\n')])])]),e("h5",{attrs:{id:"_7-2单词搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2单词搜索"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7.2单词搜索")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /test/_search\n{\n\t"query": {\n\t\t"match": {\n\t\t\t"hobby": "音乐"\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n')])])]),e("h5",{attrs:{id:"_7-3多词搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3多词搜索"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7.3多词搜索")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//搜索包含音乐和篮球的\nPOST /test/_search\n{\n\t"query": {\n\t\t"match": {\n\t\t\t"hobby": "音乐 篮球"\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n\n//搜索包含音乐还有篮球的（and）\nPOST /test/_search\n{\n\t"query": {\n\t\t"match": {\n\t\t\t"hobby": {\n\t\t\t\t"query": "音乐 篮球",\n\t\t\t\t"operator": "and"\n\t\t\t}\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n\n\nGET /goods/_search\n{\n  "query": {\n    "bool": {\n      "must": [\n        {\n          "range": {\n            "price": {\n              "gte": 1000,\n              "lte": 2000\n            }\n          }\n        },\n        {\n          "match": {\n            "name": "2018女鞋"\n          }\n        },\n        {\n          "match": {\n            "spec": "红色 黑色"\n          }\n        }\n      ],\n      "must_not": [\n        {\n          "match": {\n            "spec": "蓝色"\n          }\n        }\n      ]\n    }\n  }\n}\n\n//在Elasticsearch中也支持这样的查询，通过minimum_should_match来指定匹配度，如：70%；\nPOST /test/_search\n{\n\t"query": {\n\t\t"match": {\n\t\t\t"hobby": {\n\t\t\t\t"query": "游泳 羽毛球",\n\t\t\t\t"minimum_should_match": "70%"\n\t\t\t}\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n')])])]),e("h5",{attrs:{id:"_7-4组合搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-4组合搜索"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7.4组合搜索")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//搜索结果中必须包含篮球，不能包含音乐，如果包含了游泳，那么它的相似度更高。\nPOST /test/_search\n{\n\t"query": {\n\t\t"bool": {\n\t\t\t"must": {\n\t\t\t\t"match": {\n\t\t\t\t\t"hobby": "篮球"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"must_not": {\n\t\t\t\t"match": {\n\t\t\t\t\t"hobby": "音乐"\n\t\t\t\t}\n\t\t\t},\n\t\t\t"should": [{\n\t\t\t\t"match": {\n\t\t\t\t\t"hobby": "游泳"\n\t\t\t\t}\n\t\t\t}]\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n\n\n//默认情况下，should中的内容不是必须匹配的，如果查询语句中没有must，那么就会至少匹配其中一个。当然了，\n也可以通过minimum_should_match参数进行控制，该值可以是数字也可以的百分比。\n//minimum_should_match为2，意思是should中的三个词，至少要满足2个\n\nPOST /test/_search\n{\n\t"query": {\n\t\t"bool": {\n\t\t\t"should": [{\n\t\t\t\t\t"match": {\n\t\t\t\t\t\t"hobby": "游泳"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": {\n\t\t\t\t\t\t"hobby": "篮球"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": {\n\t\t\t\t\t\t"hobby": "音乐"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t"minimum_should_match": 2\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n')])])]),e("h5",{attrs:{id:"_7-5权重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-5权重"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7.5权重")])]),t._v(" "),e("p",[t._v("搜索关键字为“游泳篮球”，如果结果中包含了“音乐”权重为10，包含了“跑步”权重为2。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('POST /test/_search\n{\n\t"query": {\n\t\t"bool": {\n\t\t\t"must": {\n\t\t\t\t"match": {\n\t\t\t\t\t"hobby": {\n\t\t\t\t\t\t"query": "游泳篮球",\n\t\t\t\t\t\t"operator": "and"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t"should": [{\n\t\t\t\t\t"match": {\n\t\t\t\t\t\t"hobby": {\n\t\t\t\t\t\t\t"query": "音乐",\n\t\t\t\t\t\t\t"boost": 10\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"match": {\n\t\t\t\t\t\t"hobby": {\n\t\t\t\t\t\t\t"query": "跑步",\n\t\t\t\t\t\t\t"boost": 2\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t"highlight": {\n\t\t"fields": {\n\t\t\t"hobby": {}\n\t\t}\n\t}\n}\n')])])]),e("h1",{attrs:{id:"_8-elasticsearch集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-elasticsearch集群"}},[t._v("#")]),t._v(" "),e("strong",[t._v("8.Elasticsearch集群")])]),t._v(" "),e("h5",{attrs:{id:"_192-168-204-209-elasticsearch-yml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_192-168-204-209-elasticsearch-yml"}},[t._v("#")]),t._v(" "),e("strong",[t._v("192.168.204.209  elasticsearch.yml")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cluster.name: luban\nnode.name: node-1\nnode.master: true\nnode.data: true\nnetwork.host: 0.0.0.0\nhttp.port: 9200\n#参数设置一系列符合主节点条件的节点的主机名或 IP 地址来引导启动集群。\ncluster.initial_master_nodes: ["node-1"]\n# 设置新节点被启动时能够发现的主节点列表（主要用于不同网段机器连接）\ndiscovery.zen.ping.unicast.hosts: ["192.168.204.209","192.168.204.203","192.168.204.108"]\n# 该参数就是为了防止”脑裂”的产生。定义的是为了形成一个集群，有主节点资格并互相连接的节点的最小数目。\ndiscovery.zen.minimum_master_nodes: 2\n# 解决跨域问题配置\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\n\n')])])]),e("h5",{attrs:{id:"_192-168-204-203-elasticsearch-yml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_192-168-204-203-elasticsearch-yml"}},[t._v("#")]),t._v(" "),e("strong",[t._v("192.168.204.203  elasticsearch.yml")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cluster.name: luban\nnode.name: node-3\nnode.master: true\nnode.data: true\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ncluster.initial_master_nodes: ["node-1"]\ndiscovery.zen.ping.unicast.hosts: ["192.168.204.209","192.168.204.203","192.168.204.108"]\ndiscovery.zen.minimum_master_nodes: 2\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\n')])])]),e("h5",{attrs:{id:"_192-168-204-108-elasticsearch-yml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_192-168-204-108-elasticsearch-yml"}},[t._v("#")]),t._v(" "),e("strong",[t._v("192.168.204.108  elasticsearch.yml")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cluster.name: luban\nnode.name: node-2\nnode.master: true\nnode.data: true\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ncluster.initial_master_nodes: ["node-1"]\ndiscovery.zen.ping.unicast.hosts: ["192.168.204.209","192.168.204.203","192.168.204.108"]\ndiscovery.zen.minimum_master_nodes: 2\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\n')])])]),e("p",[e("strong",[t._v("启动后效果")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/%E9%9B%86%E7%BE%A4%E6%95%88%E6%9E%9C.png",alt:"集群效果"}})])]),t._v(" "),e("h3",{attrs:{id:"一台机器搭建集群-一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一台机器搭建集群-一"}},[t._v("#")]),t._v(" "),e("strong",[t._v("一台机器搭建集群(一)")])]),t._v(" "),e("p",[e("strong",[t._v("注意修改jvm.options")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/danji.png",alt:"danji"}})])]),t._v(" "),e("h5",{attrs:{id:"elasticsearch-7-3-2-node1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-7-3-2-node1"}},[t._v("#")]),t._v(" "),e("strong",[t._v("elasticsearch-7.3.2_node1")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cluster.name: luban\nnode.name: node-1\nnode.master: true\nnode.data: true\nnetwork.host: 0.0.0.0\nhttp.port: 9200\ntransport.port: 9300\ncluster.initial_master_nodes: ["node-1"]\ndiscovery.seed_hosts: ["192.168.204.209:9300", "192.168.204.209:9301","192.168.204.209:9302"]\ndiscovery.zen.minimum_master_nodes: 2\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\n')])])]),e("h5",{attrs:{id:"elasticsearch-7-3-2-node2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-7-3-2-node2"}},[t._v("#")]),t._v(" "),e("strong",[t._v("elasticsearch-7.3.2_node2")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cluster.name: luban\nnode.name: node-2\nnode.master: true\nnode.data: true\nnetwork.host: 0.0.0.0\nhttp.port: 9201\ntransport.port: 9301\ncluster.initial_master_nodes: ["node-1"]\ndiscovery.seed_hosts: ["192.168.204.209:9300", "192.168.204.209:9301","192.168.204.209:9302"]\ndiscovery.zen.minimum_master_nodes: 2\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\n')])])]),e("h5",{attrs:{id:"elasticsearch-7-3-2-node3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-7-3-2-node3"}},[t._v("#")]),t._v(" "),e("strong",[t._v("elasticsearch-7.3.2_node3")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('cluster.name: luban\nnode.name: node-3\nnode.master: true\nnode.data: true\nnetwork.host: 0.0.0.0\nhttp.port: 9202\ntransport.port: 9302\ncluster.initial_master_nodes: ["node-1"]\ndiscovery.seed_hosts: ["192.168.204.209:9300", "192.168.204.209:9301","192.168.204.209:9302"]\ndiscovery.zen.minimum_master_nodes: 2\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\n')])])]),e("p",[e("strong",[t._v("分别启动：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("./elasticsearch -p /tmp/elasticsearch_9200_pid -d\n./elasticsearch -p /tmp/elasticsearch_9201_pid -d\n./elasticsearch -p /tmp/elasticsearch_9202_pid -d\n")])])]),e("h3",{attrs:{id:"一台机器搭建集群-二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一台机器搭建集群-二"}},[t._v("#")]),t._v(" "),e("strong",[t._v("一台机器搭建集群(二)")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/dnaji%E4%BA%8C.png",alt:"dnaji二"}})])]),t._v(" "),e("p",[e("strong",[t._v("新建目录：")])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/danjidata.png",alt:"danjidata"}})])]),t._v(" "),e("p",[e("strong",[e("img",{attrs:{src:"https://fublog.oss-cn-shenzhen.aliyuncs.com/tuling/ES/danjilogs.png",alt:"danjilogs"}})])]),t._v(" "),e("p",[e("strong",[t._v("注意赋予权限")])]),t._v(" "),e("p",[e("strong",[t._v("chown -R taibai:taibai ES")])]),t._v(" "),e("p",[e("strong",[t._v("分别启动：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("./elasticsearch -d  -E node.name=node-1 -E http.port=9200 -E transport.port=9300 -E path.data=/ES/data/node1 -E path.logs=/ES/logs/node1\n\n./elasticsearch -d  -E node.name=node-2 -E http.port=9201 -E transport.port=9301 -E path.data=/ES/data/node2 -E path.logs=/ES/logs/node2\n\n./elasticsearch -d  -E node.name=node-3 -E http.port=9202 -E transport.port=9302 -E path.data=/ES/data/node3 -E path.logs=/ES/logs/node3\n")])])]),e("p",[e("strong",[t._v("https://blog.csdn.net/jiankunking/article/details/65448030")])]),t._v(" "),e("p",[e("strong",[t._v("https://blog.csdn.net/lixiaohai_918/article/details/89569611")])]),t._v(" "),e("p",[e("strong",[t._v("查看插件命令：./elasticsearch-plugin list")])]),t._v(" "),e("p",[e("strong",[t._v("下载插件命令：./elasticsearch-plugin install analysis-icu")])])])}),[],!1,null,null,null);a.default=s.exports}}]);