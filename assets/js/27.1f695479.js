(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{610:function(v,_,t){"use strict";t.r(_);var a=t(2),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),t("p",[v._v("B站的黑马程序员Spring-Cloud—Alibaba:点击"),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1zT4y1G7Ru",target:"_blank",rel:"noopener noreferrer"}},[v._v("链接地址"),t("OutboundLink")],1),v._v("跳转学习")]),v._v(" "),t("p",[v._v("资料放在网盘了 链接：https://pan.baidu.com/s/1Y6Zh4hSKYoJv3rX2RqMcfg 提取码：3vyb")]),v._v(" "),t("h3",{attrs:{id:"课程介绍1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课程介绍1"}},[v._v("#")]),v._v(" 课程介绍1")]),v._v(" "),t("p",[v._v("课程设计贯彻以下流程:")]),v._v(" "),t("ul",[t("li",[v._v("抛出问题")]),v._v(" "),t("li",[v._v("解决思路")]),v._v(" "),t("li",[v._v("业界方案")]),v._v(" "),t("li",[v._v("阿里组件")]),v._v(" "),t("li",[v._v("代码实战")]),v._v(" "),t("li",[v._v("必要补充")])]),v._v(" "),t("h2",{attrs:{id:"系统架构演变2-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统架构演变2-6"}},[v._v("#")]),v._v(" 系统架构演变2-6")]),v._v(" "),t("h4",{attrs:{id:"演变过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#演变过程"}},[v._v("#")]),v._v(" 演变过程")]),v._v(" "),t("ul",[t("li",[v._v("单体应用架构")]),v._v(" "),t("li",[v._v("垂直应用架构")]),v._v(" "),t("li",[v._v("分布式架构")]),v._v(" "),t("li",[v._v("SOA架构(面向服务架构-Dubbo)")]),v._v(" "),t("li",[v._v("微服务架构(服务的原子化拆分)")])]),v._v(" "),t("h4",{attrs:{id:"微服务架构产检问题和解决思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构产检问题和解决思路"}},[v._v("#")]),v._v(" 微服务架构产检问题和解决思路")]),v._v(" "),t("ul",[t("li",[v._v("如何管理他们")]),v._v(" "),t("li",[v._v("服务之间如何调用")]),v._v(" "),t("li",[v._v("客户端如何访问")]),v._v(" "),t("li",[v._v("有个出问题了(如何避免雪崩)")]),v._v(" "),t("li",[v._v("这么多服务中间那个环节出问题了怎么排查")])]),v._v(" "),t("h4",{attrs:{id:"微服务架构的常见概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构的常见概念"}},[v._v("#")]),v._v(" 微服务架构的常见概念")]),v._v(" "),t("ul",[t("li",[v._v("服务治理"),t("br"),v._v("\n进行服务的自动化管理,其核心服务的注册于发现.并自动剔除故障服务")]),v._v(" "),t("li",[v._v("服务调用"),t("br"),v._v("\n基于Http的RESTful和基于TCP的RPC协议")]),v._v(" "),t("li",[v._v("服务网关"),t("br"),v._v("\n统一接入、安全防护、协议适配、流量管控、容错能力"),t("br"),v._v("\nAPI网关更专注于安全(鉴权)、流量、路由等问题")]),v._v(" "),t("li",[v._v("服务容错"),t("br"),v._v("\n雪崩效应无法预防.只能尽可能去做好容错"),t("br"),v._v("\n不被上游压跨不把下游拖垮不被外界影响")]),v._v(" "),t("li",[v._v("链路追踪")])]),v._v(" "),t("h2",{attrs:{id:"环境搭建7-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建7-10"}},[v._v("#")]),v._v(" 环境搭建7-10")]),v._v(" "),t("h3",{attrs:{id:"技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#技术选型"}},[v._v("#")]),v._v(" 技术选型")]),v._v(" "),t("ul",[t("li",[v._v("Maven：3.6.3")]),v._v(" "),t("li",[v._v("数据库：Mysql8.0")]),v._v(" "),t("li",[v._v("持久层：SpringData Jpa")]),v._v(" "),t("li",[v._v("其他：SoringCloudAlibaba技术栈")])]),v._v(" "),t("p",[t("strong",[v._v("spring-cloud每个版本号对应有具体的Spring-Boot、Cloud-alibaba版本")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("Spring cloud Release Train")]),v._v(" "),t("th",[v._v("Boot Version")]),v._v(" "),t("th",[v._v("Alibaba")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("2020.0.x aka Ilford")]),v._v(" "),t("td",[v._v("2.4.x")]),v._v(" "),t("td",[v._v("2.2.3.RELEASE")])]),v._v(" "),t("tr",[t("td",[v._v("Hoxton")]),v._v(" "),t("td",[v._v("2.2.x, 2.3.x (Starting with SR5)")]),v._v(" "),t("td",[v._v("2.2.1.RELEASE")])]),v._v(" "),t("tr",[t("td",[v._v("Greenwich")]),v._v(" "),t("td",[v._v("2.1.x")]),v._v(" "),t("td",[v._v("2.1.0 RELEASE")])])])]),v._v(" "),t("p",[v._v("具体看"),t("a",{attrs:{href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"}},[v._v("spring-cloud官网"),t("OutboundLink")],1)]),v._v(" "),t("h3",{attrs:{id:"模块设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块设计"}},[v._v("#")]),v._v(" 模块设计")]),v._v(" "),t("p",[t("strong",[t("font",{attrs:{color:"red"}},[v._v("注：占用7x/8x端口主要为了后续的集群")])],1)]),v._v(" "),t("p",[v._v("spring-cloud-alibaba-learn父工程")]),v._v(" "),t("p",[v._v("shop-common公共模块【实体类】")]),v._v(" "),t("p",[v._v("shop-user用户微服务【端口：807x】")]),v._v(" "),t("p",[v._v("shop-product商品微服务【端口:808x】")]),v._v(" "),t("p",[v._v("shop-order订单微服务【端口:809x】")]),v._v(" "),t("h2",{attrs:{id:"微服务整合11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务整合11"}},[v._v("#")]),v._v(" 微服务整合11")]),v._v(" "),t("h3",{attrs:{id:"服务治理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务治理"}},[v._v("#")]),v._v(" 服务治理")]),v._v(" "),t("p",[v._v("用于"),t("strong",[v._v("服务的注册与发现")]),v._v(",并实时心态检测剔除不可用服务")]),v._v(" "),t("p",[v._v("他解决了我们许多硬编码的问题:")]),v._v(" "),t("ul",[t("li",[v._v("提供者ip或者端口变更需要手动更改")]),v._v(" "),t("li",[v._v("采用硬编码(ip:port)的形式.很难做到集群负载均衡")]),v._v(" "),t("li",[v._v("服务变多难于管理")])]),v._v(" "),t("h4",{attrs:{id:"nacos注册与配置中心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nacos注册与配置中心"}},[v._v("#")]),v._v(" Nacos注册与配置中心")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://nacos.io/zh-cn/index.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("Nacos官网"),t("OutboundLink")],1),v._v(":一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。")]),v._v(" "),t("h3",{attrs:{id:"负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[v._v("#")]),v._v(" 负载均衡")]),v._v(" "),t("p",[v._v("Ribbon是Spring Cloud的组件之一，使用注解@LoadBalanced便能很方便的实现负载均衡")]),v._v(" "),t("h3",{attrs:{id:"声明式调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明式调用"}},[v._v("#")]),v._v(" 声明式调用")]),v._v(" "),t("p",[v._v("OpenFegin是Spring Cloud提供的一个"),t("strong",[v._v("声明式的违Http客户端")])]),v._v(" "),t("p",[v._v("Nacos很好的兼容了Fegin.而Fegin默认已经实现了Ribbon负载均衡.")]),v._v(" "),t("p",[t("strong",[v._v("所以在Nacos中使用Fegin就默认实现了负载均衡")])]),v._v(" "),t("h3",{attrs:{id:"服务容错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务容错"}},[v._v("#")]),v._v(" 服务容错")]),v._v(" "),t("p",[v._v("由于网络或服务自身的原因导致服务不可用.会导致任务堆积从而造成整个微服务的瘫痪")]),v._v(" "),t("h4",{attrs:{id:"常见的容错解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的容错解决方案"}},[v._v("#")]),v._v(" 常见的容错解决方案")]),v._v(" "),t("ol",[t("li",[v._v("隔离\n采用线程池或者信号量")]),v._v(" "),t("li",[v._v("超时")]),v._v(" "),t("li",[v._v("限流")]),v._v(" "),t("li",[v._v("熔断\n当下游服务负载过高响应变慢.上游系统为了保证系统整体的可用性.会暂时性切断对下游服务的调用。这种牺牲局部保全整体的措施就叫做熔断")]),v._v(" "),t("li",[v._v("降级\n提供拖底方案.一旦服务不可用便使用拖底方案")])]),v._v(" "),t("h4",{attrs:{id:"sentinel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sentinel"}},[v._v("#")]),v._v(" Sentinel")]),v._v(" "),t("p",[v._v("阿里巴巴开源的一套用于"),t("strong",[v._v("服务容错的综合性解决方案")]),v._v("组件.在阿里内部大规模使用,很稳定")]),v._v(" "),t("p",[v._v("它以流量为切入点,对"),t("strong",[v._v("流量控制、熔断降级、系统负载保护")]),v._v("等多个维度来保护系统的稳定性")]),v._v(" "),t("ul",[t("li",[v._v("丰富的应用场景\n秒杀(突发流量控制在系统容量可以承受的方位)、消息削峰填谷、"),t("font",{attrs:{color:"red"}},[t("strong",[v._v("集群流量控制")])]),v._v("、实时熔断下游不可用服务")],1),v._v(" "),t("li",[v._v("完备的实时监控\n通过控制台可以实时查看接入应用的单台机器秒级数据")]),v._v(" "),t("li",[v._v("广泛的开源生态\n与Spring Cloud、Dubbo、gRPC整合开箱即用.只需引入依赖进行简单的配置即可")]),v._v(" "),t("li",[v._v("完善的"),t("font",{attrs:{color:"red"}},[t("strong",[v._v("SPI拓展点")])]),v._v("\n提供简单易用、晚上的SPI拓展接口，用来快速定制逻辑，如"),t("font",{attrs:{color:"red"}},[t("strong",[v._v("规则管理、适配动态数据源点")])])],1)]),v._v(" "),t("h3",{attrs:{id:"服务网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务网关"}},[v._v("#")]),v._v(" 服务网关")]),v._v(" "),t("p",[v._v("传统的直接请求微服务,存在以下几个问题")]),v._v(" "),t("ol",[t("li",[v._v("客户端多次请求不同的微服务,增加客户端代码或配置编写的复杂性")]),v._v(" "),t("li",[v._v("无法进行统一的安全防护.如鉴权等")]),v._v(" "),t("li",[v._v("存在跨域的问题")])]),v._v(" "),t("p",[v._v("而API网关提供"),t("strong",[v._v("统一入口")]),v._v("便于管理,安全防护等与具体业务无关的"),t("strong",[v._v("认证、鉴权、监控、路由转发")]),v._v("等都可以再这里实现")]),v._v(" "),t("h4",{attrs:{id:"gateway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gateway"}},[v._v("#")]),v._v(" GateWay")]),v._v(" "),t("p",[v._v("Spring公司为了替换Zuul而开发的网关服务")]),v._v(" "),t("p",[v._v("相对于Zuul1.0使用Servlet同步的多线程阻塞模型.性能高出很多")]),v._v(" "),t("p",[v._v("而Gateway和Zuul2.0都是采用的是基于Netty的异步非阻塞模型")]),v._v(" "),t("p",[v._v("GateWay不仅仅提供路由,还配套基于fliter链的处理.比如安全、监控、限流")]),v._v(" "),t("h3",{attrs:{id:"链路追踪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链路追踪"}},[v._v("#")]),v._v(" 链路追踪")]),v._v(" "),t("p",[v._v("​\t一个请求往往涉及到多个微服务.当响应延迟或者故障时，如何快速定位问题.")]),v._v(" "),t("p",[v._v("​\t这个时候就要进行"),t("strong",[v._v("分布式链路追踪")]),v._v(":")]),v._v(" "),t("p",[v._v("将一次请求的调用链路集成起来.进行集中展示")]),v._v(" "),t("h4",{attrs:{id:"sleuth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sleuth"}},[v._v("#")]),v._v(" Sleuth")]),v._v(" "),t("p",[v._v("Spring Cloud的Sleuth就是专门用来记录追踪链路的调用情况.一般与Zipkin集成解决方案")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("Trace")]),v._v(" "),t("p",[v._v("有一组TraceId相同的SpanId串联成一个树状结构")])]),v._v(" "),t("li",[t("p",[v._v("Span")]),v._v(" "),t("p",[v._v("基本的工作单元.统计了各个单元的延时")])]),v._v(" "),t("li",[t("p",[v._v("Annotation")]),v._v(" "),t("p",[v._v("记录了工作单元内的事件时间.包括cs(client send)、sr(server received)、ss(server send)、cr(client received)")])])]),v._v(" "),t("h4",{attrs:{id:"zipkin集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zipkin集成"}},[v._v("#")]),v._v(" Zipkin集成")]),v._v(" "),t("p",[v._v("​\tzipkin是Twitter的一个开源项目.致力于收集服务的定时数据.以解决架构的延迟问题、包括数据的"),t("strong",[v._v("采集、存储、查找和展示")])]),v._v(" "),t("p",[v._v("Zipkin还提供了可插拔式的数据存储方式,如mysql、Elasticsearch")]),v._v(" "),t("h3",{attrs:{id:"消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[v._v("#")]),v._v(" 消息队列")]),v._v(" "),t("p",[v._v("消息队列是一种跨进程的通信机制.应用场景主要有：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("异步解耦")]),v._v(" "),t("p",[v._v("与业务无强关联并且"),t("strong",[v._v("比较耗时而且不需要即时（同步）返回结果")]),v._v("的操作作为消息放入消息队列，比如邮件/短信通知等")]),v._v(" "),t("p",[v._v("邮件/短信系统只需消费对应业务生产出来的消息即可")])]),v._v(" "),t("li",[t("p",[v._v("流量削锋")]),v._v(" "),t("p",[v._v("在秒杀场景中.由于请求量过大。下游的通知系统无法承载海量的调用量会导致系统崩溃或者漏发的情况。这个时候可在应用和下游系统中间加入消息队列")])])]),v._v(" "),t("h4",{attrs:{id:"rocketmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq"}},[v._v("#")]),v._v(" RocketMq")]),v._v(" "),t("p",[v._v("主要概念分以下：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("Broker")]),v._v(" "),t("p",[v._v("核心，负责接收，存储，投递等功能")])]),v._v(" "),t("li",[t("p",[v._v("NameServer")]),v._v(" "),t("p",[v._v("协调者.Broker向他注册路由信息.同事Producer和Consumer向其获取注册路由信息")])]),v._v(" "),t("li",[t("p",[v._v("Producer")]),v._v(" "),t("p",[v._v("消息的生产者(应用)")])]),v._v(" "),t("li",[t("p",[v._v("Consumer")]),v._v(" "),t("p",[v._v("消息的消费者(下游业务)")])]),v._v(" "),t("li",[t("p",[v._v("Topic")]),v._v(" "),t("p",[v._v("主题.针对topic来对号入座进行topic的生产和发送")])]),v._v(" "),t("li",[t("p",[v._v("Message Queue")]),v._v(" "),t("p",[v._v("为了提高吞吐量引入的消息数据。可以并行的往各个queue投递消息消费者也可以并行的消费")])]),v._v(" "),t("li",[t("p",[v._v("Message")]),v._v(" "),t("p",[v._v("消息的载体")])]),v._v(" "),t("li",[t("p",[v._v("Producer Group")]),v._v(" "),t("p",[v._v("生产者数组")])]),v._v(" "),t("li",[t("p",[v._v("Consumer Group")]),v._v(" "),t("p",[v._v("消费者数组")])])]),v._v(" "),t("h5",{attrs:{id:"普通消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通消息"}},[v._v("#")]),v._v(" 普通消息")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("可靠同步消息")]),v._v(" "),t("p",[v._v("发送方会在接收方返回响应后才继续发送下一个包.常见的场景如重要邮件、报名短信通知等")])]),v._v(" "),t("li",[t("p",[v._v("可靠异步消息")]),v._v(" "),t("p",[v._v("不等接收方返回响应就接着发送下一个包.发送方通过回调接口接受服务器响应.一般用于链路耗时较长的流处理等")])]),v._v(" "),t("li",[t("p",[v._v("单向发送")]),v._v(" "),t("p",[v._v("直接发送不需要接收方任何反馈")])])]),v._v(" "),t("h5",{attrs:{id:"顺序消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#顺序消息"}},[v._v("#")]),v._v(" 顺序消息")]),v._v(" "),t("p",[v._v("消息指定hash值便可抵达同一Message Queue")]),v._v(" "),t("h5",{attrs:{id:"事务消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务消息"}},[v._v("#")]),v._v(" 事务消息")]),v._v(" "),t("p",[v._v("通过事务消息，能达到消息的最终一致性")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("投递半消息事务到消息队列")])]),v._v(" "),t("li",[t("p",[v._v("提交本地事务.通知消息队列Commit/Rollback")]),v._v(" "),t("ol",[t("li",[v._v("commit就投递消息到事务订阅方")]),v._v(" "),t("li",[v._v("rollback则删除消息不做任何操作")])])]),v._v(" "),t("li",[t("p",[v._v("消息回查:当发生网络故障或服务宕机时，应提供消息队列回查功能(服务方得存储事务状态)")]),v._v(" "),t("p",[v._v("事务订阅方异常也得进行回滚操作")])])]),v._v(" "),t("h3",{attrs:{id:"服务配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务配置"}},[v._v("#")]),v._v(" 服务配置")]),v._v(" "),t("h4",{attrs:{id:"nacos-config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nacos-config"}},[v._v("#")]),v._v(" Nacos Config")]),v._v(" "),t("p",[t("strong",[v._v("注：不能使用appliction.yml得使用bootstrap.yml")])]),v._v(" "),t("blockquote",[t("p",[v._v("配置文件优先级(由高到低):")]),v._v(" "),t("p",[v._v("bootstrap.properties -> bootstrap.yml -> application.properties -> application.ym")])]),v._v(" "),t("h3",{attrs:{id:"分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[v._v("#")]),v._v(" 分布式事务")]),v._v(" "),t("h4",{attrs:{id:"事务的四大特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的四大特性"}},[v._v("#")]),v._v(" 事务的四大特性")]),v._v(" "),t("p",[v._v("​\tACID:原子性、一致性、隔离性、持久性")]),v._v(" "),t("h4",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),t("p",[v._v("​\t事务的参与者分布在不同的节点中")]),v._v(" "),t("h4",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[v._v("#")]),v._v(" 解决方案")]),v._v(" "),t("h5",{attrs:{id:"全局事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局事务"}},[v._v("#")]),v._v(" 全局事务")]),v._v(" "),t("p",[v._v("全局事务基于DTP模型实现.Distributed Transaction Processing Reference Model")]),v._v(" "),t("p",[v._v("它需要三种角色")]),v._v(" "),t("ol",[t("li",[v._v("AP（Application Program）微服务应用")]),v._v(" "),t("li",[v._v("TM（Transaction Manager）事务管理器")]),v._v(" "),t("li",[v._v("RM （Resource Manager）资源管理器")])]),v._v(" "),t("p",[v._v("两阶段提交：")]),v._v(" "),t("ol",[t("li",[v._v("表决阶段.参与者都执行本地事务到差最后的一步commit/rollback")]),v._v(" "),t("li",[v._v("执行阶段.根据所有参与者的反馈统一执行commit/rollback操作")])]),v._v(" "),t("p",[v._v("优点：数据强一致性、简单")]),v._v(" "),t("p",[v._v("缺点:")]),v._v(" "),t("ol",[t("li",[v._v("单点问题：事务协调者故障")]),v._v(" "),t("li",[v._v("资源在两阶段中处于锁阻塞状态")]),v._v(" "),t("li",[v._v("执行阶段无法知道commit结果")])]),v._v(" "),t("h5",{attrs:{id:"可靠消息服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可靠消息服务"}},[v._v("#")]),v._v(" 可靠消息服务")]),v._v(" "),t("p",[v._v("通过中间件来保证上下游服务数据的最终一致性")]),v._v(" "),t("h5",{attrs:{id:"最大努力通知"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最大努力通知"}},[v._v("#")]),v._v(" 最大努力通知")]),v._v(" "),t("h5",{attrs:{id:"tcc事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcc事务"}},[v._v("#")]),v._v(" TCC事务")]),v._v(" "),t("p",[v._v("即Try Confirm Cancel.它属于补偿型分布式事务")]),v._v(" "),t("p",[v._v("TCC与XA区别")]),v._v(" "),t("p",[v._v("XA是资源层面的分布式事务.2PC阶段资源处于锁状态.属于强一致性书屋")]),v._v(" "),t("p",[v._v("TCC是业务层面的分布式事务.最终一致性.不会一直持有资源锁")]),v._v(" "),t("h4",{attrs:{id:"seata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seata"}},[v._v("#")]),v._v(" Seata")]),v._v(" "),t("p",[v._v("阿里巴巴中间件团队开源的中间件.是一套分布式解决方案")]),v._v(" "),t("p",[v._v("对业务无侵入式.对于传统的XA分布式事务RM本身就是数据库.而Seata的RM则是以jar包的方式最为中间件部署在应用程序中")]),v._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[v._v("#")]),v._v(" 参考资料")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://blog.didispace.com/api-gateway-Zuul-1-zuul-2-how-to-choose/",target:"_blank",rel:"noopener noreferrer"}},[v._v("API网关 Zuul1.0 和 2.0 我们该如何选择？"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/agilestyle/p/11623047.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("TCC、XA 、DTP区别"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);